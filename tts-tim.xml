<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<TriggerPackage>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>tts-tim</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName>tts-tim</packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>read everything</name>
				<script>local output
output = matches[1]
output = output:gsub("&lt;", "less than")
output = output:gsub("&gt;", "greater than")
if(output:match("%S")) then -- if string is not just whitespace
  ttsQueue(output)
end</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>1</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>(.*)</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
		</TriggerGroup>
	</TriggerPackage>
	<TimerPackage />
	<AliasPackage>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>tts-tim</name>
			<script></script>
			<command></command>
			<packageName>tts-tim</packageName>
			<regex></regex>
			<Alias isActive="yes" isFolder="no">
				<name>tts commands</name>
				<script>--[[
TODO:

use a variable in a mapping or whatever the lua equivalent is, so that I can
have a namespace kind of thing to avoid conflict
https://forums.mudlet.org/viewtopic.php?t=1211

things like "stop" do not need announced, maybe have a debug mode variable to enable
or a smaller window that can be made visible

current_line - number of line that is being pointed at
variable that is retained throughout session

up - interrupt current speech and read previous line
down - skip and start next line

temporary trigger that happens at end of spoken line, it starts a timer

the timer will reset your current line if you press nothing in certain time

you can manually stop reviewing instead of waiting on the timer

should I have something to notify of new next while reviewing old text?
should it queue it up and then resume? should I hold a variable saying where
I started reviewing, and then that timer starts at that line?

"spell that"

change speech trigger regex to skip empty lines


--]]
tts_tim = tts_tim or {}
local arg = matches[2]
local output
local rate
if arg == "stop" then
  ttsClearQueue()
  ttsSkip()
  output = "Stopped"
  echo(output)
  ttsSpeak(output)
elseif arg == "repeat" then
  output = table.concat(getLines(getLineNumber()-5, getLineNumber())," ")
  echo("TTS repeating last lines: "..output)
  ttsQueue(output)
  -- TODO currently this shows commands I typed and all that I could filter out

elseif arg == "faster" then
  rate = ttsGetRate()
  if rate == 1 then
    output = "1 is fastest speed"
    echo(output)
    ttsQueue(output)
  else
    output = "speeding up from "..rate.." to "..(rate+0.1)
    ttsSetRate(rate+0.1)
    echo(output)
    ttsQueue(output)
  end
elseif arg == "slower" then
  rate = ttsGetRate()
  if rate == -1 then
    output = "-1 is slowest speed"
    echo(output)
    ttsQueue(output)
  else
    output = "slowing down from "..rate.." to "..(rate-0.1)
    ttsSetRate(rate-0.1)
    echo(output)
    ttsQueue(output)
  end

elseif arg == "higher" then
  rate = ttsGetPitch()
  if rate == 1 then
    output = "1 is highest pitch"
    echo(output)
    ttsQueue(output)
  else
    output = "raising pitch from "..rate.." to "..(rate+0.1)
    ttsSetPitch(rate+0.1)
    echo(output)
    ttsQueue(output)
  end
elseif arg == "lower" then
  rate = ttsGetPitch()
  if rate == -1 then
    output = "-1 is lowest pitch"
    echo(output)
    ttsQueue(output)
  else
    output = "lowering pitch from "..rate.." to "..(rate-0.1)
    ttsSetPitch(rate-0.1)
    echo(output)
    ttsQueue(output)
  end
  
elseif arg == "louder" then
  rate = ttsGetVolume()
  if rate == 1 then
    output = "1 is highest volume"
    echo(output)
    ttsQueue(output)
  else
    output = "raising volume from "..rate.." to "..(rate+0.1)
    ttsSetVolume(rate+0.1)
    echo(output)
    ttsQueue(output)
  end
elseif arg == "softer" then
  rate = ttsGetVolume()
  if rate == -1 then
    output = "-1 is lowest volume"
    echo(output)
    ttsQueue(output)
  else
    if tts_tim.risk == nil then
      -- see https://github.com/Mudlet/Mudlet/issues/4698
      output = "Changing volume crashes Tim's computer.  Type 'tts risk' to unlock volume anyway"
      ttsQueue(output)
      echo(output)
      return
    end
    output = "lowering volume from "..rate.." to "..(rate-0.1)
    ttsSetVolume(rate-0.1)
    echo(output)
    ttsQueue(output)
  end
elseif arg == "risk" then
  tts_tim.risk = true
  output = "Unlocking volume"
  ttsQueue(output)
  echo(output)

elseif arg == "voice" then
  local voiceList = ttsGetVoices()
  local oldVoice = ttsGetCurrentVoice()
  local sz = table.getn(voiceList)
  local count = 1
  if sz == 0 then
    output = "Your list of available voices is empty."
    ttsQueue(output)
    echo(output)
    return
  end
  for _,v in pairs(voiceList) do
    if oldVoice == v then
      ttsSetVoiceByIndex((count % sz) +1)
    end
    count = count + 1
  end
  if count &gt; sz   + 1 then
    ttsSetVoiceByIndex(math.floor(math.random()*sz)+1)
    output = "Your voice was set to "..oldVoice.." which is not in the list of "..sz.." available voices.\n"
    output = output.."This seems odd. Switching to "..ttsGetCurrentVoice().."."
  else
    output = "There are "..sz.." voices available.  Old voice was "..oldVoice..", new voice is "..ttsGetCurrentVoice().."."
  end
  echo(output)
  ttsQueue(output)

elseif arg == "skip" then
  if ttsGetState() == "ttsSpeechReady" and table.getn(ttsGetQueue()) &gt; 0 then
    echo("avoiding a skip bug\n")
    return -- cheap hack, see https://github.com/Mudlet/Mudlet/issues/4737
  end
  ttsSkip()
elseif arg == "pause" then
  ttsPause()
elseif arg == "resume" or arg == "unpause" then
  ttsResume()
  
  
elseif arg == "back" then
  -- if not reviewing then start reviewing, go back 1 line and read getAreaExits
  -- and set up an event for end of reading the message
  tim_tts.cursor = tim_tts.cursor - 1
elseif arg == "forward" then
  tim_tts.cursor = tim_tts.cursor + 1
  -- interrupt and go to next line and read it
elseif arg == "end reviewing" then
  tim_tts.cursor = nil
elseif arg == "read" then
  --read line that cursor is on

elseif arg == "dev" then
  local voiceList = ttsGetVoices()
  local oldVoice = ttsGetCurrentVoice()
  local sz = table.getn(voiceList)
  output = "ttsGetCurrentVoice: "..ttsGetCurrentVoice()
  output = output.."\nttsGetVoices() shows "..sz.." voices available:\n  "
  output = output..table.concat(voiceList,"\n  ")
  output = output.."\nttsGetQueue() has "..table.getn(ttsGetQueue()).." lines"
  output = output.."\nttsGetCurrentLine() has "..(ttsGetCurrentLine() or "nil")
  output = output.."\nttsGetState() has "..ttsGetState()
  echo(output)
  --ttsQueue(output)

elseif arg == "status" then
  output = "Current speed is "..ttsGetRate()..". Pitch is "..ttsGetPitch()..". Volume is "..ttsGetVolume()..". Voice is "..ttsGetCurrentVoice().."."
  echo(output)
  ttsQueue(output)
elseif arg == "help" then
  output = "TTS commands are help, stop, skip, repeat, faster, slower, louder, softer, higher, lower, pause, resume, voice, status.\n"
  echo(output)
  ttsQueue(output)
end</script>
				<command></command>
				<packageName></packageName>
				<regex>^tts (.*)</regex>
			</Alias>
		</AliasGroup>
	</AliasPackage>
	<ActionPackage />
	<ScriptPackage />
	<KeyPackage />
	<VariablePackage>
		<HiddenVariables />
	</VariablePackage>
</MudletPackage>
